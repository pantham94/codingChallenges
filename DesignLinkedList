/*Design Linked List*/
package LeetEasy;

public class DesignLinkedList {
	
	int size;
	Node head;
	Node tail;
	
	public DesignLinkedList(){
		size = 0;
		head = null;
		tail = null;
	}
	
	public Node getNode(int index) {
		if(index>size||index<0) {
			return null;
		}
		int count = 0;
		Node temp;
		int tailDistance = size-1-index;
		if(index<tailDistance) {
			temp = head;
			while(count<index) {
				temp = temp.next;
				count++;
			}
		} else {
			temp = tail;
			if(count<tailDistance) {
				temp = temp.prev;
				count++;
			}
		}
		return temp;
	}
	public int get(int index) {
		Node target = getNode(index);
		return target!=null?target.val:-1;
	}
	public void addAtHead(int value) {
		Node newNode = new Node(value);
		if(head==null) {
			head = newNode;
			tail = newNode;
		} else {
			newNode.prev = head;
			head.prev = newNode;
			head = newNode;
		}
		size++;
	}
	public void addAtTail(int value) {
		Node newNode = new Node(value);
		if(tail == null) {
			head = newNode;
			tail = newNode;
		} else {
			newNode.prev = tail;
			tail.next = newNode;
			tail = newNode;
		}
		size++;
	}
	public void addAtIndex(int index,int value) {
		if(index<=0) {
			addAtHead(value);
		} else if(index == size) {
			addAtTail(value);
		} else if(index<size) {
			Node newNode = new Node(value);
			Node target = getNode(index);
			newNode.next = target;
			newNode.prev = target.prev;
			target.prev = newNode;
			newNode.prev.next = newNode;
			size++;
		}
	}
	public void deleteAtIndex(int index) {
		if(index>=size||index<=0) {
			return;
		} else if(index==0) {
			head=head.next;
			if(head!=null) {
				head.prev = null;
			} 
		} else if(index==size-1) {
			tail = tail.prev;
			if(tail!=null) {
				tail.next=null;
			}
		} else if(index<size-1) {
			Node target = getNode(index);
			target.prev.next = target.next;
			target.next.prev = target.prev;
		}
		size--;
	}
	public static void main(String[] args) {
		DesignLinkedList linkedList = new DesignLinkedList();
		linkedList.addAtHead(1);
		System.out.println("linkedList.addAtHead(1)");
		linkedList.addAtTail(3);
		System.out.println("linkedList.addAtTail(3)");
		linkedList.addAtIndex(1, 2);
		System.out.println("linkedList.addAtIndex(1, 2)"); // linked list becomes 1->2->3
		linkedList.get(1);
		System.out.println("linkedList.get(1)");           // returns 2
		linkedList.deleteAtIndex(1);
		System.out.println("linkedList.deleteAtIndex(1)");  // now the linked list is 1->3
		System.out.println("linkedList.get(1)--->"+linkedList.get(1));          // returns 3

	}
	class Node{
		int val;
		Node next;
		Node prev;
		public Node(int val){
			this.val = val;
			next = null;
			prev = null;
		}
	}
	

}
